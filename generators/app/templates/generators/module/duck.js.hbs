import { createAction } from 'redux-actions';
import { call, put, takeLatest, select } from 'redux-saga/effects';

// Constants
export const {{constantCase name}}_VERB = '{{camelCase name}}/{{constantCase name}}_VERB';

// Reducer
const initialState = {};

export default (state = initialState, action) => {
  switch (action.type) {
    case {{constantCase name}}_VERB:
        return { ...state }
    default:
      return state;
  }
};

// Action creators
export const verb{{constantCase name}} = createAction({{constantCase name}}_VERB);

export const actions = {
  verb{{constantCase name}},
};

// Selectors
const get{{constantCase name}} = (state) => state.somePart;

// Sagas

function* getData() {
  try {
    yield call(Api.getData);
    yield put({ type: '{{constantCase name}}_VERB_SUCCEEDED' });
  } catch (e) {
    yield put({ type: '{{constantCase name}}_VERB_FAILED', message: e.message });
  }
}

function* mySaga() {
  yield takeEvery({{constantCase name}}_VERB, getData);
}

function* mySaga2() {
  yield takeEvery({{constantCase name}}_OTHE_VERB, getData);
}

export const Sagas = [mySaga, mySaga2];
